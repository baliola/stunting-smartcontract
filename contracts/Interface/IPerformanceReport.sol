// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

/// @title IPerformanceReport - Interface for submitting and verifying performance reports on-chain.
/// @author @anggadanarp
/// @notice This interface defines the structure and actions required for performance report tracking and verification.
/// @dev Implemented by contracts such as PerformanceReportRegistry.
interface IPeformanceReport {
    // ================================================================================
    //                                    ERRORS
    // ================================================================================

    /// @notice Thrown when the caller or signer is not authorized to perform the action.
    /// @param signer The address attempting the action.
    error Unauthorized(address signer);

    /// @notice Thrown when the recovered signer does not match the expected sender.
    /// @param signer The recovered address from the signature.
    /// @param actual The actual msg.sender that attempted the action.
    error InvalidSignature(address signer, address actual);

    // ================================================================================
    //                                    ENUMS
    // ================================================================================

    /// @notice Represents the verification status of a performance report.
    enum ReportStatus {
        Pending,
        Approved,
        Rejected
    }

    // ================================================================================
    //                                    STRUCTS
    // ================================================================================

    /// @notice Represents a single performance report entry.
    /// @dev Stores metadata such as submitter, status, and evaluation details.
    struct Report {
        address submitter;
        uint256 submittedAt;
        bytes signature;
        ReportStatus status;
        address evaluatedBy;
        uint256 evaluatedAt;
    }

    // ================================================================================
    //                                    EVENTS
    // ================================================================================

    /// @notice Emitted when a new performance report is submitted.
    /// @param reportHash The keccak256 hash of the report content.
    /// @param submitter The address that signed and submitted the report.
    /// @param timestamp The block timestamp when the report was submitted.
    event ReportSubmitted(
        bytes32 indexed reportHash,
        address indexed submitter,
        uint256 timestamp
    );

    /// @notice Emitted when a submitted report is evaluated.
    /// @param reportHash The keccak256 hash of the report.
    /// @param evaluator The address of the evaluator.
    /// @param approved True if approved, false if rejected.
    /// @param timestamp The time the evaluation took place.
    event ReportVerified(
        bytes32 indexed reportHash,
        address indexed evaluator,
        bool approved,
        uint256 timestamp
    );

    // ================================================================================
    //                                 EXTERNAL FUNCTIONS
    // ================================================================================

    /// @notice Submit a performance report hash with a valid ECDSA signature.
    /// @param reportHash The keccak256 hash of the report content.
    /// @param signature The ECDSA signature generated by the report submitter.
    function submitReport(
        bytes32 reportHash,
        bytes calldata signature
    ) external;

    /// @notice Verify an existing report by approving or rejecting it.
    /// @param reportHash The hash of the report to evaluate.
    /// @param approved True to approve, false to reject.
    function verifyReport(bytes32 reportHash, bool approved) external;

    /// @notice Retrieve the full report entry by its hash.
    /// @param reportHash The hash of the report.
    /// @return The full report struct containing submission and evaluation metadata.
    function getReport(
        bytes32 reportHash
    ) external view returns (Report memory);

    /// @notice Checks whether a report has already been submitted.
    /// @param reportHash The hash of the report to check.
    /// @return True if the report has been submitted, false otherwise.
    function getIsSubmitted(bytes32 reportHash) external view returns (bool);
}
