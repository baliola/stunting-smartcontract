// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

/// @title IDataEntry - Interface for metadata hash submission system with signature verification
/// @author @anggadanarp
/// @notice Defines the standard interface for submitting and querying data entries in a hash-based registry.
/// @dev This interface is implemented by contracts like DataRegistry, StuntingRegistry, etc.
interface IDataEntry {
    // ================================================================================
    //                                     ERRORS
    // ================================================================================

    /// @notice Thrown when the same metadataHash has already been submitted.
    /// @param dataHash The hash that has already been submitted.
    error DuplicateData(bytes32 dataHash);

    /// @notice Thrown when the recovered signer does not match the transaction sender.
    /// @param expected The recovered signer address from the signature.
    /// @param actual The actual msg.sender address of the transaction.
    error InvalidSignature(address expected, address actual);

    /// @notice Thrown when the signer does not have the required role to submit data.
    /// @param signer The address attempting to submit the data.
    error Unauthorized(address signer);

    // ================================================================================
    //                                     EVENTS
    // ================================================================================

    /// @notice Emitted when a new data entry is successfully submitted.
    /// @param dataHash The keccak256 hash of the submitted metadata payload.
    /// @param submitter The address that signed and submitted the data.
    /// @param timestamp The block timestamp when the data was submitted.
    event DataSubmitted(
        bytes32 indexed dataHash,
        address indexed submitter,
        uint256 timestamp
    );

    // ================================================================================
    //                                     STRUCTS
    // ================================================================================

    /// @notice Structure representing a submitted data entry.
    /// @dev Contains the signer, timestamp of submission, and original signature.
    struct DataEntry {
        address submitter;
        uint256 timestamp;
        bytes signature;
    }

    // ================================================================================
    //                                 EXTERNAL FUNCTIONS
    // ================================================================================

    /// @notice Submits a metadata hash along with a signature to verify the submitter.
    /// @param metadataHash The keccak256 hash of the metadata payload.
    /// @param signature The ECDSA signature of the hash generated by the submitter.
    function submitData(
        bytes32 metadataHash,
        bytes calldata signature
    ) external;

    /// @notice Returns the stored DataEntry for a given metadata hash.
    /// @param dataHash The hash of the metadata payload to query.
    /// @return entry The stored DataEntry struct including submitter, timestamp, and signature.
    function getDataEntry(
        bytes32 dataHash
    ) external view returns (DataEntry memory entry);

    /// @notice Checks whether a specific metadata hash has already been submitted.
    /// @param hash The metadata hash to check.
    /// @return submitted True if the hash has been submitted, false otherwise.
    function isDataSubmitted(
        bytes32 hash
    ) external view returns (bool submitted);
}
