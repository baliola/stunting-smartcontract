/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface DelegationInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
}

export namespace DelegateEvent {
  export type InputTuple = [
    nik: BytesLike,
    creditorConsumerCode: BytesLike,
    creditorProviderCode: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    nik: string,
    creditorConsumerCode: string,
    creditorProviderCode: string,
    status: bigint
  ];
  export interface OutputObject {
    nik: string;
    creditorConsumerCode: string;
    creditorProviderCode: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Delegation extends BaseContract {
  connect(runner?: ContractRunner | null): Delegation;
  waitForDeployment(): Promise<this>;

  interface: DelegationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Delegate"
  ): TypedContractEvent<
    DelegateEvent.InputTuple,
    DelegateEvent.OutputTuple,
    DelegateEvent.OutputObject
  >;

  filters: {
    "Delegate(bytes32,bytes32,bytes32,uint8)": TypedContractEvent<
      DelegateEvent.InputTuple,
      DelegateEvent.OutputTuple,
      DelegateEvent.OutputObject
    >;
    Delegate: TypedContractEvent<
      DelegateEvent.InputTuple,
      DelegateEvent.OutputTuple,
      DelegateEvent.OutputObject
    >;
  };
}
